/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.8"
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'
apply plugin: "com.github.spotbugs"

apply {
    plugin 'eclipse'
    plugin 'checkstyle'
    plugin 'jacoco'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '0.5.2'

[compileJava, compileTestJava]*.options*.encoding = "UTF-8"
javadoc {
    options {
        charSet = 'UTF-8'
        encoding = 'UTF-8'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

[checkstyleMain, checkstyleTest, spotbugsMain, spotbugsTest]*.ignoreFailures = true

dependencies {
    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompileOnly 'org.projectlombok:lombok:1.18.4'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.4'

    compile 'args4j:args4j:2.0.16'
    compileOnly 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'
}

// Define the main class for the application
mainClassName = 'jp.dip.oyasirazu.artags.Main'

build {
    dependsOn 'jacocoTestReport'
}

jacoco {
    applyTo run
}

task applicationCodeCoverageReport(type:JacocoReport) {
    executionData run
    sourceSets sourceSets.main
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
        html.destination = file("${buildDir}/reports/jacoco")
    }
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = true
        html.enabled = false
        html.destination = file("${buildDir}/reports/spotbugs")
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled false
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Create ARXML tags Application.'
        attributes 'Implementation-Version': version
        attributes "Main-Class" : "jp.dip.oyasirazu.artags.Main"
    }
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}
